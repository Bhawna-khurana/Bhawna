# Setup AutoScaling Level1 
# - Rolling Update 
# 
# Note, this is a basic use of Cloudformation with disregard for Security Group Access 
# You should always update Security Group Access with your own IP Address to ensure your instances security. 
# 
# How to validate template 
# aws cloudformation validate-template --template-body file:////path//cloudformation//AutoScaling//autoscaling-level1.yml 
# 
# How to Create/Update stack  
# aws cloudformation create-stack --stack-name myAutoScale --template-body file:////path//cloudformation//AutoScaling//autoscaling-level1.yml 
# aws cloudformation update-stack --stack-name myAutoScale --template-body file:////path//cloudformation//AutoScaling//autoscaling-level1.yml 
# 
# How to Delete stack 
# aws cloudformation delete-stack --stack-name myAutoScale 
# 
# Example with parameter 
# aws cloudformation create-stack  --stack-name startmyinstance   
#    --template-body file://home/ec2-user/templates/startmyinstance.json  
#    --parameters  ParameterKey=KeyPairName,ParameterValue=MyKey ParameterKey=InstanceType,ParameterValue=t1.micro 
--- 
AWSTemplateFormatVersion: '2010-09-09' 
Description: "Rolling Update" 
Parameters: 
  VPCParameter: 
    Description: "VPC to launch instances into" 
    Type: "AWS::EC2::VPC::Id" 
    Default: 'vpc-4c3fc128' 
  SubnetsParameter: 
    Description: "Subnets to launch instances into" 
    Type: "List<AWS::EC2::Subnet::Id>" 
    Default: "subnet-e47ed292, subnet-604dff04" 
  VersionParameter: 
    Description: "Software version to deploy" 
    Type: "String" 
    Default: "ver1.0" 


# Mappings allow us to map a key to a corresponding set of named values 
# So if our instance is brought up in the eu-west-1 region we can use 
# AWS::Region to tell us the current zone and then use the intrinsic function 
# Fn::FindInMap to return the relevant matched value 
Mappings: 
  RegionMap: 
    eu-west-1: 
      AMI: "ami-bff32ccc" 
    ap-southeast-1: 
      AMI: "ami-dc9339bf" # My-Default-AMI 
    ap-southeast-2: 
      AMI: "ami-48d38c2b" 
    eu-central-1: 
      AMI: "ami-bc5b48d0" 
    ap-northeast-2: 
      AMI: "ami-249b554a" 
    ap-northeast-1: 
      AMI: "ami-383c1956" 
    us-east-1: 
      AMI: "ami-0b33d91d" 
    sa-east-1: 
      AMI: "ami-6817af04" 
    us-west-1: 
      AMI: "ami-d5ea86b5" 
    us-west-2: 
      AMI: "ami-f0091d91" 


Resources:  
  EC2SecurityGroup: 
    Type: "AWS::EC2::SecurityGroup" 
    Properties: 
      GroupDescription: "ec2-sg" 
      SecurityGroupEgress: 
      - IpProtocol: "-1" 
        CidrIp: "0.0.0.0/0" 
      SecurityGroupIngress: 
      - CidrIp: "0.0.0.0/0" 
        FromPort: "22" 
        IpProtocol: "tcp" 
        ToPort: "22" 
      - FromPort: "80" 
        IpProtocol: "tcp" 
        SourceSecurityGroupId: 
          Ref: "ELBSecurityGroup" 
        ToPort: "80" 
      VpcId: 
        Ref: "VPCParameter" 


  LaunchConfiguration: 
    Type: "AWS::AutoScaling::LaunchConfiguration" 
    Properties: 
      AssociatePublicIpAddress: "true" 
      ImageId: 
        Fn::FindInMap: 
        - "RegionMap" 
        - Ref: "AWS::Region" 
        - "AMI" 
      InstanceType: "t2.micro" 
      SecurityGroups: 
      - Ref: "EC2SecurityGroup" 
      UserData: 
        Fn::Base64: 
          Fn::Join: 
          - '' 
          - - "#!/bin/bash -ex" 
            - "\n" 
            - "yum -y install httpd" 
            - "\n" 
            - "chkconfig httpd on" 
            - "\n" 
            - 'echo "Version ' 
            - Ref: "VersionParameter" 
            - "\" >> /var/www/html/index.html" 
            - "\n" 
            - "service httpd start" 
            - "\n" 
            - "/opt/aws/bin/cfn-signal -e 0 --region " 
            - Ref: "AWS::Region" 
            - " --stack " 
            - Ref: "AWS::StackName" 
            - " --resource AutoScalingGroup" 
            - "\n" 


  AutoScalingGroup: 
    Type: "AWS::AutoScaling::AutoScalingGroup" 
    Properties: 
      MinSize: '2' 
      MaxSize: '2' 
      DesiredCapacity: '1' 
      LaunchConfigurationName: 
        Ref: "LaunchConfiguration" 
      VPCZoneIdentifier: 
        Ref: "SubnetsParameter" 
      HealthCheckGracePeriod: "60" 
    CreationPolicy: 
      ResourceSignal: 
        Count: "1" 
        Timeout: "PT10M" 
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MaxBatchSize: '2' 
        MinInstancesInService: '1' 
        PauseTime: "PT10M" 
        SuspendProcesses: 
        - "AlarmNotification" 
        WaitOnResourceSignals: "true" 

